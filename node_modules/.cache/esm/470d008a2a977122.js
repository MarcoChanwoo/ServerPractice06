let Koa,Router,bodyParser,mongoose,api;_2a9‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_2a9‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_2a9‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_2a9‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_2a9‍.w("./api",[["default",["api"],function(v){api=v}]]);require('dotenv').config();







// 비구조화 할당을 통해 process.env 내부 값에 대한 레퍼런스 제작
const { PORT, MONGO_URI } = process.env;

mongoose
    .connect(MONGO_URI)
    .then(() => {
        console.log('Connected to MONGO DB');
    })
    .catch((e) => {
        _2a9‍.g.console.error(e);
    });

const app = new Koa();
const router = new Router();

// 라우터 설정
router.use('/api', api.routes());

// 라우터 적용 전에 bodyParser 적용
app.use(bodyParser());

// app 인스턴스에 라우터 적용
app.use(router.routes()).use(router.allowedMethods());

// PORT가 지정되어 있지 않다면 4000 사용
const port = PORT || 4000;
app.listen(port, () => {
    _2a9‍.g.console.log('Listening to port %d', port);
});
